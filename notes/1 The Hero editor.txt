Create a new component.

$ ng generate component heroes

// shorter way is 

$ ng g c heroes

    this creates a new folder,
    with the files 
    .html, .ts, .css, and .ts for the test file 

        import { Component, OnInit } from '@angular/core';

        @Component({
            selector: 'app-heroes',
            templateUrl: './heroes.component.html',
            styleUrls: ['./heroes.component.css']
        })
        export class HeroesComponent implements OnInit {

            constructor() { }

            ngOnInit(): void {
            }

        }

Can always import the Component symbol from @angular/core library 
and annotate the typescript class with @Component

Component is a decorator function that specifies the Angular metadata for the 
component.

CLI also generated 3 metadata properties 

    1. selector - the component's CSS element selector
    2. templateUrl - the location of the component's template file
    3. styleUrls - the location of the component's private CSS styles

ngOnInit() is a lifecycle hook.
Angular calls ngOnInit() shortly after creating a component.

A good place to put initialization logic.

Always export the component class so that you can import it 
elsewhere, like in AppModule.

<h1>{{title}}</h1>
<app-heroes></app-heroes>

--

export interface Hero {
    id: number;
    name: string;
}

// for explicitly setting the type 
hero: Hero = {
    id: 1,
    name: 'Windstorm'
};


<h2>{{hero.name}} Details</h2>
<div><span>id: </span>{{hero.id}}</div>
<div><span>name: </span>{{hero.name}}</div>



----

Use the UppercasePipe,

pipes are for formatting

<h2>{{hero.name | uppercase }} Details

Pipes are a good way to format strings,
currency amounts, dates and other display data.
Angular ships with several built-in pipes and 
you can create your own.

--

Edit through form fields 

two-way binding 

    [(ngModel)]

    is Angular's two-way binding syntax.

ngModel is a valid Angular directive,
but it isn't available by default.

It belongs to the optional FormsModule,
and you must opt-in to using it.

-
AppModule

    Angular needs to know how the pieces of your application 
    fit together and what other files and libraries 
    the application requires.

    This information is called metadata.

    Some of the metadata is in the @Component decorators 
    that you added to your component classes.
    Other critical metadata is in the @NgModule decorators.

    The most import @NgModule decorator annotates the top-level AppModule class.

import { FormsModule } from '@angular/forms'; // <-- NgModel lives here

-
Every component must be declared in exactly one NgModule.

import { HeroesComponent } from './heroes/heroes.component';

-
