add data persistence features with the 
help of Angular's HttpClient

Enable HTTP Services

    HttpClient is Angular's mechanism for 
    communicating with a remote server over HTTP

    making HttpClient available everywhere 
    in the application in two steps 

    in app.module.ts

        import { HttpClientModule } from '@angular/common/http';

        add HttpClientModule to the imports array

        @NgModule({
            imports: [
                HttpClientModule,
            ]
        })

simulate a data server

    this tutorial sample mimics 
    communication with a remote data server
    using the in-memory Web API Module.

    // note this is just for the tutorial,
    // nothing to do with angular below 
    $ npm install angular-in-memory-web-api --save

Heroes and HTTP

    hero.service.ts

    import { HttpClient, HttpHeaders } from '@angular/common/http';

Get heroes with HttpClient

    in HeroService

    getHeroes(): Observable<Hero[]> {
        return this.http.get<Hero[]>(this.heroesUrl);
    }

HttpClient methods return one value

    All HttpClient methods return an 
    RxJS Observable of something.

    HTTP is a request/response protocol.

    You make a request, it returns a response.

    In general,
    an observable can return multiple values over time.

    An observable from HttpClient always 
    emits a single value and then completes,
    never to emit again.

HttpClient.get() returns response data

    returns the data as an untyped JSON object 
    by default.

    can apply the optional type specifier

    <Hero[]> to add TypeScript capabilities
    which reduces errors during compile time

    the server's data API determines the shape 
    of the JSON data.

    other APIs may bury the data you want 
    within an object.

    Might have to dig it out by 
    processing the Observable result 
    with the RxJS map() operator 

Error handling

    things go wrong when getting data from a 
    remote server

    to catch errors, you 'pipe' 
    the observable result from the 
    http.get() through an RxJS catchError() operator


    hero.service.ts

        import { catchError, map, tap } from 'rxjs/operators';



        /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error);

       // TODO: better job of transforming error for user consumption
       this.log(`${operation} failed: ${error.message}`);

       // let the app keep running by returning an empty result
       return of(result as T);
    };
  }

Tap into the Observable

    the HeroService methods 
    will tap into the flow of observable values 

    they do that with the Rxjs tap() operator 
    which loks at the observable values,
    does something with those values,
    and passes them along 

    tap() callback doesn't touch the values 
    themselves 


    getHeroes(): Observable<Hero[]> {
        return this.http.get<Hero[]>(this.heroesUrl)
        .pipe(
            tap(_ => this.log('fetched heroes')),
            catchError(this.handleError<Hero[]>('getHeroes', []))
        );
    }

Get hero by id

    most web APIs support get by id 
    request in the form of :baseURL/:id

    getHero(id: number): Observable<Hero> {
      const url = `${this.heroesUrl}/${id}`;
      return this.http.get<Hero>(url).pipe(
        tap(_ => this.log(`fetched hero id=${id}`)),
        catchError(this.handleError<Hero>(`getHero id=${id}`))
      );
    }

Update heroes

    in hero-detail.component.ts

    <button (click)="save()">save</button>


Add a new hero

    add(name: string) {
        name = name.trim();
        if (!name) return;
        this.heroService.addHero({ name } as Hero)
        .subscribe(hero => {
            this.heroes.push(hero);
        });
    }

    // in hero service class 
addHero(hero: Hero): Observable<Hero> {
    return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions).pipe(
      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),
      catchError(this.handleError<Hero>('addHero'))
    );
  }


Delete a hero

    delete(hero: Hero) {
        this.heroes = this.heroes.filter(h => h !== hero);
        this.heroService.deleteHero(hero.id).subscribe();
    }


    note 
    if you neglect to subscribe()
    the service will not send the request 
    to the server 

    as a rule, an Observable 
    does nothing until something subscribes


search by name

    you can chain Observable operators 
    together 
    so you can reduce the number 
    of similar HTTP requests and consume 
    network bandwidth economically

    /* GET heroes whose name contains search term */
searchHeroes(term: string): Observable<Hero[]> {
  if (!term.trim()) {
    // if not search term, return empty hero array.
    return of([]);
  }
  return this.http.get<Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(
    tap(x => x.length ?
       this.log(`found heroes matching "${term}"`) :
       this.log(`no heroes matching "${term}"`)),
    catchError(this.handleError<Hero[]>('searchHeroes', []))
  );
}



<div id="search-component">
    <label for="search-box">Hero Search</label>
    <input #searchBox id="search-box" (input)="search(searchBox.value)" />
  
    <ul class="search-result">
      <li *ngFor="let hero of heroes$ | async" >
        <a routerLink="/detail/{{hero.id}}">
          {{hero.name}}
        </a>
      </li>
    </ul>
  </div>


    so note the async pipe 


    so $ is a convention that 
    indicates heroes$ 
    is an Observable, not an array.

    <li *ngFor="let hero of heroes$ | async" >


    Angular's AsynPipe ,
    subscribes to the Observable automatically
    so you won't have to do so in 
    the component class

edit the HeroSearchComponent class

    import { Component, OnInit } from '@angular/core';

import { Observable, Subject } from 'rxjs';

import {
  debounce,
  debounceTime, distinctUntilChanged, switchMap
} from 'rxjs/operators';

import { Hero } from '../shared/interfaces/hero';
import { HeroService } from '../services/hero-service/hero.service';

@Component({
  selector: 'app-hero-search',
  templateUrl: './hero-search.component.html',
  styleUrls: ['./hero-search.component.css']
})
export class HeroSearchComponent implements OnInit {
  heroes$!: Observable<Hero[]>;
  private searchTerms = new Subject<string>();

  constructor(private heroService: HeroService) { }

  ngOnInit(): void {
    this.heroes$ = this.searchTerms.pipe(
      // wait 300ms after each keystroke before considering the term
      debounceTime(300),

      // ignore new term if same as previous term
      distinctUntilChanged(),

      // switch to new search observable each time the term changes
      switchMap((term: string) => this.heroService.searchHeroes(term)),
    );
  }

  // Push a search term into the observable stream.
  search(term: string) {
    this.searchTerms.next(term);
  }

}

---

The searchTerms RxJS subject


    a Subject is both a source 
    of observable values and an Observable itself.

    You can subscribe to a Subject 
    as you would any Observable.

    You can also push values into that Observable
    by calling its next(value)


Chaining RxJS operators

    passing a new search term 
    after every user keystroke 
    would create an excessive amount of http 
    requests,

    taxing server rsources and burning through data plans.

    instead 

    we pipe the observable
    through a sequence of RxJS operators 
    that reduce the number of calls 

    debounceTime(300) waits until the flow of new string 
    events pauses for 300 milliseconds before passing along
     the latest string. You'll never make requests more
      frequently than 300ms.

    distinctUntilChanged() ensures that a request 
    is sent only if the filter text changed.

    switchMap() calls the search service for each 
    search term that makes it through debounce() and 
    distinctUntilChanged(). It cancels and discards 
    previous search observables, returning only the 
    latest search service observable.

